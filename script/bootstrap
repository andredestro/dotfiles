#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

source script/log

echo ''

check_mac_updates() {
  info 'Finding available software updates'
  softwareupdate_result=$(softwareupdate -l 2>&1)
  if [[ softwareupdate_result = *"No new software available"* ]]; then
    system_updated=true
  fi
  if ! [[ system_updated = true ]]; then
    if [[ softwareupdate_result = *"[restart]"* ]]; then
      need_reboot=true
    fi
    sudo softwareupdate -i -a --no-scan
  fi 
  success 'MacOS updated!'

  if [[ need_reboot = true ]]; then
    warning 'Please, reboot your mac and re-run this script'
    exit 0
  fi
}

update_terminal_profile() {
  info 'Changing default profile in Terminal.app'
  if source terminal/update_profile.sh | while read -r data; do info "$data"; done
  then
    success 'terminal profile'
  else
    fail 'error updating profile'
  fi
}

setup_git() {
  info 'Setup gitconfig'
  # if there is no user.email, we'll assume it's a new machine/setup and ask it
  if [ -z "$(git config --global --get user.email)" ]; then
  user ' - What is your github author name?'
  read -r user_name
  user ' - What is your github author email?'
  read -r user_email

  git config --global user.name "$user_name"
  git config --global user.email "$user_email"
  else
  # otherwise this gitconfig was already made
  info 'already configured'
  fi
  # include the gitconfig.local file
  git config --global include.path ~/.gitconfig.local
  success 'gitconfig'
}

link_file() {
  if [ -e "$2" ]; then
    if [ "$(readlink "$2")" = "$1" ]; then
      success "skipped $1"
      return 0
    else
      mv "$2" "$2.backup"
      success "moved $2 to $2.backup"
    fi
  fi
  ln -sf "$1" "$2"
  success "linked $1 to $2"
}

dotfiles() {
  info 'Installing dotfiles'
  find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*' |
    while read -r src; do
      dst="$HOME/.$(basename "${src%.*}")"
      link_file "$src" "$dst"
    done
}

install_dependencies() {
  info 'Installing dependencies'
  # if source bin/dot | while read -r data; do info "$data"; done
  if sh script/install
  then
    success 'dependencies installed'
  else
    fail 'error installing dependencies'
  fi
}

update_defaults() {
  # find the defaults and run them iteratively
  info "Find and executes defaults scripts"
  find . -name defaults.sh | while read defaults_file ; do 
    source "${defaults_file}";
    success "${defaults_file}"
  done
}

find_zsh() {
  if which zsh >/dev/null 2>&1 && grep "$(which zsh)" /etc/shells >/dev/null; then
    which zsh
  else
    echo "/bin/zsh"
  fi
}

set_zsh_default_shell() {
  zsh="$(find_zsh)"
  which chsh >/dev/null 2>&1 &&
    chsh -s "$zsh" &&
    success "set $("$zsh" --version) at $zsh as default shell"
}


check_mac_updates
update_terminal_profile
setup_git
dotfiles
update_defaults
install_dependencies
set_zsh_default_shell

for app in "Dock" "Finder" "Mail" "Messages" "Safari" "SystemUIServer"; do
    killall "${app}" > /dev/null 2>&1
done

echo ''
echo '  All installed!'
